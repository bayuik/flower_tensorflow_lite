# -*- coding: utf-8 -*-
"""flower_species_tf_lite.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T7sA9Wrud0U6RPBTPzmNALz8q-35HK3z

# **Import Library**
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
from google.colab import files
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from google.colab import drive
import zipfile,os,shutil

# %matplotlib inline
drive.mount('/content/drive')

"""# **Directory**

## **Dataset Directory**
"""

local_zip = '/content/drive/Othercomputers/My Laptop/submission/flower_classification.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

base_dir = '/content/flower_classification'

os.listdir(base_dir)

"""# **Image Data Generator**"""

train_datagen = ImageDataGenerator(
                    rescale = 1./255,
                    horizontal_flip = True,
                    rotation_range = 20,
                    shear_range = 0.2,
                    zoom_range=0.2,
                    fill_mode = 'nearest',
                    validation_split=0.2)

train_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size = (150, 150),
    batch_size = 128,
    class_mode = 'categorical',
    subset='training')

validation_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size = (150, 150),
    batch_size = 128,
    class_mode = 'categorical',
    subset='validation')

"""# **Model**

## **Model Architecture**
"""

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv2D(64, (3,3), activation = 'relu', input_shape = (150, 150, 3)),
  tf.keras.layers.MaxPooling2D(2, 2),
  tf.keras.layers.Conv2D(32, (3,3), activation = 'relu'),
  tf.keras.layers.MaxPooling2D(2,2),
  tf.keras.layers.Dropout(0.4),  
  tf.keras.layers.Conv2D(128,(3,3), activation = 'relu'),
  tf.keras.layers.MaxPooling2D(2,2),
  tf.keras.layers.Dropout(0.4),  
  tf.keras.layers.Flatten(),
  tf.keras.layers.Dropout(0.5),
  tf.keras.layers.Dense(512, activation = 'relu'),
  tf.keras.layers.Dense(256, activation = 'relu'),
  tf.keras.layers.Dense(5, activation = 'softmax')
])

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

model.summary()

"""## **Callback**"""

class StopTraining(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy') > 0.85):
      print('Accuracy has reached', logs.get('accuracy'))
      self.model.stop_training = True

callbacks = StopTraining()

"""## **Train Model**"""

history = model.fit(
    train_generator,
    epochs = 30,
    validation_data = validation_generator,
    verbose = 2,
    batch_size = 128,
    callbacks = [callbacks],
)

"""# **Plot**"""

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy Model')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

"""# **Predict Image**"""

uploaded = files.upload()
for fn in uploaded.keys():
  path = fn
  img = tf.keras.utils.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = tf.keras.utils.img_to_array(img)
  x = np.expand_dims(x, axis=0)
  images = np.vstack([x])
  classes = model.predict(images, batch_size=128)
  print(classes)

"""# **TF-Lite**

## **Saved Model**
"""

save_path = 'predict_flower_species'
tf.saved_model.save(model, save_path)

"""## **Convert to TF-Lite**"""

converter = tf.lite.TFLiteConverter.from_saved_model(save_path)
tflite_model = converter.convert()

with open('model.tflite', 'wb') as f:
  f.write(tflite_model)